[[plugins]]
hook_add = '''
let g:lexima_enable_endwise_rules = 1
let g:lexima_enable_newline_rules = 1
'''
on_event = ['InsertEnter']
repo = 'cohama/lexima.vim'


[[plugins]]
repo = '907th/vim-auto-save'
# repo = 'vim-scripts/vim-auto-save'
hook_add = '''
    if expand("%:p") =~ 'COMMIT_EDITMSG'
    else
        let g:auto_save = 1
    endif
    let g:auto_save_in_insert_mode = 0  " do not save while in insert mode
'''
on_event = ['InsertEnter']

# [[plugins]]
# build = './install --all'
# merged = 0
# on_cmd = ['Rg']
# repo = 'junegunn/fzf'
# 
# [[plugins]]
# depends = ['fzf']
# hook_add = '''
# nnoremap <M-F> :Rg<CR>
# '''
# on_source = ['fzf']
# repo = 'junegunn/fzf.vim'

[[plugins]]
hook_add = '''
nnoremap <F5> :UndotreeToggle<CR>
'''
on_cmd = ['UndotreeToggle']
repo = 'mbbill/undotree'

[[plugins]]
hook_add = '''
nnoremap <F22> :QuickRun<CR>
nnoremap <S-F10> :QuickRun<CR>
'''
on_cmd = [':QuickRun']
repo = 'thinca/vim-quickrun'

[[plugins]]
hook_add = '''
nnoremap <M-1> :NvimTreeToggle<CR>
'''
hook_post_source = '''
lua <<EOF
require'nvim-tree'.setup {
}
EOF
'''
on_cmd = ['NvimTreeToggle']
repo = 'kyazdani42/nvim-tree.lua'


[[plugins]]
depends = 'denops'
hook_post_source = '''
nmap  <C-a>  <Plug>(dps-dial-increment)
nmap  <C-x>  <Plug>(dps-dial-decrement)
xmap  <C-a>  <Plug>(dps-dial-increment)
xmap  <C-x>  <Plug>(dps-dial-decrement)
xmap g<C-a> g<Plug>(dps-dial-increment)
xmap g<C-x> g<Plug>(dps-dial-decrement)
'''
on_source = ['denops']
repo = 'monaqa/dps-dial.vim'

[ftplugin]
go = '''
set tabstop=4
set nowrap
'''
markdown = '''
setlocal wrap
setlocal tabstop=2
setlocal shiftwidth=2
'''

# [[plugins]]
# hook_source = '''
#     set shellslash
#     let g:vimtex_compiler_progname = 'nvr'  
#     let g:vimtex_view_general_viewer = 'evince'
#     let g:vimtex_compiler_latexmk = {
#     \     'background': 1,
#     \     'build_dir': '',
#     \     'executable': 'latexmk',
#     \     'options': [
#     \     '-lualatex',
#     \    ],
#     \}
# '''
# on_ft = ['plaintex', 'tex']
# repo = 'lervag/vimtex'

# [[plugins]]
# build = 'sh -c "cd app && yarn install"'
# on_ft = ['markdown', 'pandoc.markdown', 'rmd']
# repo = 'iamcco/markdown-preview.nvim'
# 
# [[plugins]]
# hook_add = '''
# let g:vim_markdown_folding_disabled = 1
# let g:vim_markdown_math = 0
# let g:vim_markdown_new_list_item_indent = 2
# let g:vim_markdown_auto_iinsert_bullets= 0 
# let g:vim_markdown_conceal = 0
# '''
# on_ft = ['markdown']
# repo = 'preservim/vim-markdown'

[[plugins]]
hook_post_source = '''
"source $HOME/.config/nvim/plug_confs/nvim-treesitter.vim
lua <<EOF
require'nvim-treesitter.configs'.setup {
  -- One of "all", "maintained" (parsers with maintainers), or a list of languages
  ensure_installed = "all",

  highlight = {
    -- `false` will disable the whole extension
    enable = true,

   -- list of language that will be disabled
    disable = {"vim", "lua"},

    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
  rainbow = {
    enable = true,
    -- disable = { "jsx", "cpp" }, list of languages you want to disable the plugin for
    extended_mode = true, -- Also highlight non-bracket delimiters like html tags, boolean or table: lang -> boolean
    max_file_lines = nil, -- Do not enable for files with more than n lines, int
    -- colors = {}, -- table of hex strings
    -- termcolors = {} -- table of colour name strings
    }
}
EOF
'''
merged = 0
on_event = 'VimEnter'
repo = 'nvim-treesitter/nvim-treesitter'

[[plugins]]
depends = ['nvim-treesitter']
on_source = 'nvim-treesitter'
repo = 'p00f/nvim-ts-rainbow'

# [[plugins]]
# hook_add = '''
# " check with C-k and key result
# " vim help key-notaion
# nnoremap <A-l> :LspDocumentFormat<CR>
# noremap <S-F6> :LspRename<CR>
# noremap <F18> :LspRename<CR>
# let g:lsp_fold_enabled = 0
# let g:lsp_document_highlight_enabled = 0
# '''
# on_event = 'VimEnter'
# repo = 'prabirshrestha/vim-lsp'
# 
# [[plugins]]
# depends = ['vim-lsp']
# on_source = ['vim-lsp']
# repo = 'mattn/vim-lsp-settings'
# 
# [[plugins]]
# depends = ['vim-lsp']
# on_source = ['vim-lsp']
# repo = 'mattn/vim-lsp-icons'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = ['insertEnter']

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
on_source = ['nvim-lspconfig']

[[plugins]]
repo = 'hrsh7th/nvim-cmp'
on_event=['insertEnter']
hook_post_source = '''
lua <<EOF
  -- Setup nvim-cmp.
  local cmp = require'cmp'

  cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
      end,
    },
    window = {
      -- completion = cmp.config.window.bordered(),
      -- documentation = cmp.config.window.bordered(),
    },
    mapping = cmp.mapping.preset.insert({
      -- ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      -- ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
      -- https://github.com/hrsh7th/nvim-cmp/wiki/Example-mappings#intellij-like-mapping
      ["<Tab>"] = cmp.mapping(function(fallback)
      -- This little snippet will confirm with tab, and if no entry is selected, will confirm the first item
      if cmp.visible() then
        local entry = cmp.get_selected_entry()
	if not entry then
	  cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
	else
	  cmp.confirm()
	end
      else
        fallback()
      end
    end, {"i","s","c",}),
    }),
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      { name = 'ultisnips' }, -- For ultisnips users.
      { name = 'nvim_lsp_signature_help' },
    }, {
      { name = 'buffer' },

    })
  })

  -- Set configuration for specific filetype.
  cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
      { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
    }, {
      { name = 'buffer' },
    })
  })

  -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline('/', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })

  -- Setup lspconfig.
  local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
  -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
  -- https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md
  -- require('lspconfig')['YOUR_LSP_SERVER'].setup {
  --   capabilities = capabilities
  -- }
  -- require('lspconfig')['taplo'].setup {}
EOF
'''

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
on_source = ['nvim-cmp']
depends = ['nvim-lspconfig','nvim-cmp']

[[plugins]]
repo = 'quangnguyen30192/cmp-nvim-ultisnips'

[[plugins]]
hook_add = '''
let g:UltiSnipsSnippetDirectories = [$HOME . "/.config/nvim/ultisnips"]
let g:UltiSnipsExpandTrigger = "<C-l>"
'''
repo = 'SirVer/ultisnips'

[[plugins]]
repo= 'hrsh7th/cmp-nvim-lsp-signature-help'
on_source=['nvim-cmp']

# [[plugins]]
# repo = 'prabirshrestha/async.vim'
# 
# [[plugins]]
# depends = ['ultisnips', 'async.vim', 'vim-lsp']
# on_source = ['vim-lsp']
# repo = 'thomasfaingnaert/vim-lsp-ultisnips'
# hook_post_source = '''
# let g:UltiSnipsExpandTrigger="<tab>"
# let g:UltiSnipsJumpForwardTrigger="<tab>"
# let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
# '''
# [[plugins]]
# depends = ['denops.vim']
# hook_source = '''
# source $HOME/.config/nvim/plug_confs/ddc.vim
# '''
# on_event = ['insertEnter']
# repo = 'Shougo/ddc.vim'
# 
# [[plugins]]
# on_source = 'ddc.vim'
# repo = 'Shougo/ddc-around'
# 
# [[plugins]]
# on_source = 'ddc.vim'
# repo = 'Shougo/ddc-matcher_head'
# 
# [[plugins]]
# on_source = 'ddc.vim'
# repo = 'tani/ddc-fuzzy'
# 
# [[plugins]]
# on_source = 'ddc.vim'
# repo = 'Shougo/ddc-converter_remove_overlap'
# 
# [[plugins]]
# depends = ['ddc.vim', 'vim-lsp']
# on_source = ['ddc.vim', 'vim-lsp']
# repo = 'shun/ddc-vim-lsp'
# 
# [[plugins]]
# on_source = 'ddc.vim'
# repo = 'LumaKernel/ddc-file'
# 
# [[plugins]]
# on_source = 'ddc.vim'
# repo = 'delphinus/ddc-treesitter'
# 
# [[plugins]]
# depends = ['ultisnips']
# on_source = 'ddc.vim'
# repo = 'matsui54/ddc-ultisnips'
# 
# [[plugins]]
# on_source = 'ddc.vim'
# repo = 'gamoutatsumi/ddc-emoji'
