# [[plugins]]
# hook_add = '''
# let g:lexima_enable_endwise_rules = 1
# let g:lexima_enable_newline_rules = 1
# '''
# on_event = ['InsertEnter']
# repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'windwp/nvim-autopairs'
on_event = ['InsertEnter']
hook_post_source = '''
lua <<EOF
require('nvim-autopairs').setup{}

local cmp = require("nvim-cmp")
-- https://github.com/windwp/nvim-autopairs#you-need-to-add-mapping-cr-on-nvim-cmp-setupcheck-readmemd-on-nvim-cmp-repo
local cmp_autopairs = require("nvim-autopairs.completion.cmp")
cmp.event:on( 'confirm_done', cmp_autopairs.on_confirm_done({  map_char = { tex = '' } }))
-- add a lisp filetype (wrap my-function), FYI: Hardcoded = { "clojure", "clojurescript", "fennel", "janet" }
cmp_autopairs.lisp[#cmp_autopairs.lisp+1] = "racket"

EOF
'''
[[plugins]]
repo = '907th/vim-auto-save'
# repo = 'vim-scripts/vim-auto-save'
hook_add = '''
    if expand("%:p") =~ 'COMMIT_EDITMSG'
    else
        let g:auto_save = 1
    endif
    let g:auto_save_in_insert_mode = 0  " do not save while in insert mode
'''
on_event = ['InsertEnter']

# [[plugins]]
# build = './install --all'
# merged = 0
# on_cmd = ['Rg']
# repo = 'junegunn/fzf'
# 
# [[plugins]]
# depends = ['fzf']
# hook_add = '''
# nnoremap <M-F> :Rg<CR>
# '''
# on_source = ['fzf']
# repo = 'junegunn/fzf.vim'

[[plugins]]
hook_add = '''
nnoremap <F5> <cmd>UndotreeToggle<CR>
'''
on_cmd = ['UndotreeToggle']
repo = 'mbbill/undotree'

[[plugins]]
hook_add = '''
nnoremap <F22> <cmd>QuickRun<CR>
nnoremap <S-F10> <cmd>QuickRun<CR>
'''
on_cmd = ['QuickRun']
repo = 'thinca/vim-quickrun'

[[plugins]]
hook_add = '''
nnoremap <M-1> <cmd>NvimTreeToggle<CR>
'''
hook_post_source = '''
lua <<EOF
require'nvim-tree'.setup {
}
EOF
'''
on_cmd = ['NvimTreeToggle']
repo = 'kyazdani42/nvim-tree.lua'


[[plugins]]
depends = 'denops'
hook_post_source = '''
nmap  <C-a>  <Plug>(dps-dial-increment)
nmap  <C-x>  <Plug>(dps-dial-decrement)
xmap  <C-a>  <Plug>(dps-dial-increment)
xmap  <C-x>  <Plug>(dps-dial-decrement)
xmap g<C-a> g<Plug>(dps-dial-increment)
xmap g<C-x> g<Plug>(dps-dial-decrement)
'''
on_source = ['denops']
repo = 'monaqa/dps-dial.vim'

[ftplugin]
go = '''
set tabstop=4
set nowrap
'''
markdown = '''
setlocal wrap
setlocal tabstop=2
setlocal shiftwidth=2
'''

# [[plugins]]
# hook_source = '''
#     set shellslash
#     let g:vimtex_compiler_progname = 'nvr'  
#     let g:vimtex_view_general_viewer = 'evince'
#     let g:vimtex_compiler_latexmk = {
#     \     'background': 1,
#     \     'build_dir': '',
#     \     'executable': 'latexmk',
#     \     'options': [
#     \     '-lualatex',
#     \    ],
#     \}
# '''
# on_ft = ['plaintex', 'tex']
# repo = 'lervag/vimtex'

[[plugins]]
build = 'sh -c "cd app && yarn install"'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
repo = 'iamcco/markdown-preview.nvim'

# [[plugins]]
# hook_add = '''
# let g:vim_markdown_folding_disabled = 1
# let g:vim_markdown_math = 0
# let g:vim_markdown_new_list_item_indent = 2
# let g:vim_markdown_auto_iinsert_bullets= 0 
# let g:vim_markdown_conceal = 0
# '''
# on_ft = ['markdown']
# repo = 'preservim/vim-markdown'

[[plugins]]
hook_post_source = '''
"source $HOME/.config/nvim/plug_confs/nvim-treesitter.vim
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "all",
  highlight = {
    enable = true,
    disable = {"vim", "lua"},

    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    -- additional_vim_regex_highlighting = false,
  },
  rainbow = {
    enable = true,
    -- disable = { "jsx", "cpp" }, list of languages you want to disable the plugin for
    extended_mode = true, -- Also highlight non-bracket delimiters like html tags, boolean or table: lang -> boolean
    max_file_lines = nil, -- Do not enable for files with more than n lines, int
    -- colors = {}, -- table of hex strings
    -- termcolors = {} -- table of colour name strings
    },
  indent = { enable =false },
  yati = {enable =true},
}
EOF
'''
merged = 0
on_event = 'VimEnter'
repo = 'nvim-treesitter/nvim-treesitter'

[[plugins]]
depends = ['nvim-treesitter']
on_source = 'nvim-treesitter'
repo = 'p00f/nvim-ts-rainbow'

[[plugins]] 
repo = 'yioneko/nvim-yati'
on_source= ['nvim-treesitter']
depends=['nvim-treesitter']

[[plugins]]
repo = 'SmiteshP/nvim-gps'
depends = ['nvim-treesitter']
on_source = ['nvim-treesitter']
hook_post_source= '''
lua <<EOF
local gps = require("nvim-gps")
-- require("lualine").setup({
-- sections = {
-- lualine_c = {
-- {gps.get_location, cond = gps.is_available},
-- }
-- }
-- })
EOF

'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_source = ['VimEnter']
depends = 'nvim-lsp-installer'
hook_post_source = '''
lua <<EOF
-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=false}
vim.api.nvim_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
vim.api.nvim_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
vim.api.nvim_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
vim.api.nvim_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  -- vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  -- vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  -- vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  -- vim.api.nvim_buf_set_keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  -- vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  -- vim.api.nvim_buf_set_keymap(bufnr, 'n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  -- vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  -- vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  -- vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  -- vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<F18>', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  -- vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  -- vim.api.nvim_buf_set_keymap(bufnr, 'n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  -- vim.api.nvim_buf_set_keymap(bufnr, 'n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
  vim.api.nvim_buf_set_keymap(bufnr, 'n', '<M-l>', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
-- local servers = { 'pyright', 'rust_analyzer', 'tsserver' }


local installer = require("nvim-lsp-installer")
installer.setup {}
local servers = installer.get_installed_servers()
  -- print(dump(servers))
-- Add additional capabilities supported by nvim-cmp
local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())

for _, server in pairs(servers) do
  require("lspconfig")[server.name].setup {
    on_attach = on_attach,
    capabilities= capabilities,
  }
end
EOF
'''

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
on_event= ['VimEnter']

[[plugins]]
on_event=['VimEnter']
repo = 'hrsh7th/nvim-cmp'
hook_post_source = '''
lua <<EOF
  -- Setup nvim-cmp.
  local cmp = require'cmp'

  cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
      end,
    },
    window = {
      -- completion = cmp.config.window.bordered(),
      -- documentation = cmp.config.window.bordered(),
    },
    mapping = cmp.mapping.preset.insert({
      -- ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      -- ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
      ['<Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      else
        fallback()
      end
    end, { 'i', 's' }),
    ['<S-Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      else
        fallback()
      end
    end, { 'i', 's' }),
    }),
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      { name = 'ultisnips' }, -- For ultisnips users.
      { name = 'nvim_lsp_signature_help' },
      { name = 'path' },
    }, {
      { name = 'buffer' },

    })
  })

  -- Set configuration for specific filetype.
  cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
      { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
    }, {
      { name = 'buffer' },
    })
  })

  -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline('/', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })

  -- Setup lspconfig.
  -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
  -- https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md
  -- require('lspconfig')['YOUR_LSP_SERVER'].setup {
  --   capabilities = capabilities
  -- }
  -- require('lspconfig')['taplo'].setup {}
-- end
-- end

EOF
'''

[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
on_source = ['nvim-cmp']
depends = ['nvim-lspconfig','nvim-cmp']

[[plugins]]
repo = 'quangnguyen30192/cmp-nvim-ultisnips'
on_source = ['nvim-cmp']
[[plugins]]
repo = 'hrsh7th/cmp-path'
on_source=['nvim_lsp']

[[plugins]]
hook_add = '''
let g:UltiSnipsSnippetDirectories = [$HOME . "/.config/nvim/ultisnips"]
let g:UltiSnipsExpandTrigger = "<C-l>"
'''
repo = 'SirVer/ultisnips'

[[plugins]]
repo= 'hrsh7th/cmp-nvim-lsp-signature-help'
on_source=['nvim-cmp']

[[plugins]]
repo = 'stevearc/aerial.nvim'
hook_post_source= '''
lua << EOF
require('aerial').setup{
}
EOF
'''
hook_add = '''
nnoremap <M-2> <cmd>AerialToggle left<CR>

'''
on_cmd = ['AerialToggle']

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
# depends = ['plenary.nvim','ripgrep','fd','telescope-fzf-native.nvim']
depends = ['plenary.nvim','ripgrep','fd']
on_event = 'VimEnter'
hook_post_source= """
lua <<EOF
local actions = require("telescope.actions")

require('telescope').setup {
  defaults = {
    mappings = {
        i = {
            ["<esc>"] = actions.close,
        },
    }
  },
  extensions = {
    fzf = {
      fuzzy = true,                    -- false will only do exact matching
      override_generic_sorter = true,  -- override the generic sorter
      override_file_sorter = true,     -- override the file sorter
      case_mode = "smart_case",        -- or "ignore_case" or "respect_case"
                                       -- the default case_mode is "smart_case"
    }
  }
}
-- To get fzf loaded and working with telescope, you need to call
-- load_extension, somewhere after setup function:
require('telescope').load_extension('fzf')
EOF
nnoremap <M-f> <cmd>Telescope<CR>
nnoremap <M-g> <cmd>Telescope live_grep<CR>
"""

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
on_event = 'VimEnter'


[[plugins]]
repo = 'BurntSushi/ripgrep'
on_event = 'VimEnter'

[[plugins]]
repo ='sharkdp/fd'
on_event = 'VimEnter'

[[plugins]]
repo = 'nvim-telescope/telescope-fzf-native.nvim'
on_event = 'VimEnter'
build = 'make'

[[plugins]]
repo = 'twitvim/twitvim'
on_event = 'VimEnter'

[[plugins]]
repo = 'mattn/vim-maketable'
on_ft=['markdown']

[[plugins]]
repo = 'prettier/vim-prettier'
on_ft=['markdown']
hook_post_source = '''
"nnoremap <M-l> <cmd>PrettierAsync<CR>
'''

