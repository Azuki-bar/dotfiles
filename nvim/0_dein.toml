[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
hook_add = '''
call ddc#custom#patch_global('sources', [
            \ 'around',
            \ 'vim-lsp',
            \ 'deoppet',
            \ 'file'
            \])
call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'minAutoCompleteLength': 1,
      \   'around': {'mark': 'A'},
      \   'matchers': ['matcher_head'],
      \   'converters': ['converter_remove_overlap'],
      \ },
      \ 'vim-lsp': {
      \   'matchers': ['matcher_fuzzy'],
      \   'mark': 'lsp',
      \ },
      \ 'file': {
      \   'mark': 'F',
      \   'isVolatile': v:true,
      \   'forceCompletionPattern': '\S/\S*',
      \ },
      \ 'deoppet': {
      \   'dup': v:true, 
      \   'mark': 'dp'
      \},
      \}
      \)
call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })
call ddc#custom#patch_global('filterParams',{
      \  'matcher_fuzzy' :{
      \ 'splitMode': 'word'
      \}
      \})
call ddc#enable()

'''
repo = 'Shougo/ddc.vim'

# [[plugins]]
# repo = 'Shougo/pum.vim'
# hook_add = '''
# '''

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'tani/ddc-fuzzy'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'

[[plugins]]
repo = 'shun/ddc-vim-lsp'

[[plugins]]
repo = 'LumaKernel/ddc-file'

[[plugins]]
repo = 'Shougo/deoppet.nvim'

[[plugins]]
hook_add = '''
" check with C-k and key result
" vim help key-notaion
nnoremap <A-l> :LspDocumentFormat<CR>
noremap <S-F6> :LspRename<CR>
noremap <F18> :LspRename<CR>
let g:lsp_fold_enabled = 0
'''
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'mattn/vim-lsp-icons'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

#
# from lazy
#
[[plugins]]
hook_add = '''
    let g:lexima_enable_endwise_rules = 1
'''
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
hook_add = '''
    let g:vim_markdown_folding_disabled = 1
    let g:vim_markdown_math = 0
    let g:vim_markdown_new_list_item_indent = 2
    let g:vim_markdown_auto_iinsert_bullets= 0 
    let g:vim_markdown_conceal = 0
'''
on_ft = ['markdown']
repo = 'preservim/vim-markdown'

[[plugins]] # gitの表示
repo = 'airblade/vim-gitgutter'

[[plugins]]
hook_add = '''
    nnoremap <F5> :UndotreeToggle<CR>
'''
repo = 'mbbill/undotree'

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
hook_post_source = '''
    let g:context_filetype#filetypes = {
        'markdown': [
            {
                'start': '.*$',
                'end': '$',
                'filetype': 'plaintex',
            },
            {
                'start': '.*$$',
                'end': '$$',
                'filetype': 'plaintex',
            },
        ],
    }
'''
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = '907th/vim-auto-save'
# repo = 'vim-scripts/vim-auto-save'
hook_add = '''
    if expand("%:p") =~ 'COMMIT_EDITMSG'
    else
        let g:auto_save = 1
    endif
    let g:auto_save_in_insert_mode = 0  " do not save while in insert mode
'''

[[plugins]]
build = 'sh -c "cd app && yarn install"'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
repo = 'iamcco/markdown-preview.nvim'


[[plugins]]
hook_post_update = '''
    TSUpdate all    
    lua <<EOF
require'nvim-treesitter.configs'.setup {
  -- One of "all", "maintained" (parsers with maintainers), or a list of languages
  ensure_installed = "maintained",

  highlight = {
    -- `false` will disable the whole extension
    enable = true,

    -- list of language that will be disabled
    -- disable = {},

    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
}
EOF
'''
repo = 'nvim-treesitter/nvim-treesitter'

